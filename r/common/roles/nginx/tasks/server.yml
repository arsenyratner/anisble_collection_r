# - debug: "var=server.server_name"
# - debug: "var=server.redirect_to_https"

- block:
  - name: create server root
    ansible.builtin.file:
      state: directory
      path: "{{ server.root }}"

  - name: "{{ server.root }}/index.html"
    ansible.builtin.copy:
      dest: "{{ server.root }}/index.html"
      content: |
        <h1>{{ server.server_name }}</h1>
    changed_when: false 
  when: server.root is defined

- name: Check key and cert exists
  block:
    - name: "{{ server.ssl.certificate }}"
      ansible.builtin.stat:
        path: "{{ server.ssl.certificate }}"
      register: certificate_result
    - debug: 
        msg: "{{ server.ssl.certificate }} not exists, disable server"
      when: not certificate_result.stat.exists
    - name: "{{ server.ssl.key }}"
      ansible.builtin.stat:
        path: "{{ server.ssl.key }}"
      register: key_result
    - debug: 
        msg: "{{ server.ssl.key }} not exists, disable server"
      when: not key_result.stat.exists
    - name: 
      ansible.builtin.set_fact:
        nginx_server_disable: false
      when: certificate_result.stat.exists | default(false) and key_result.stat.exists | default(false)
  when: server.ssl is defined

- name: "{{ nginx_sites_available_dir }}/{{ server.filename | default(server.server_name) }}"
  ansible.builtin.template:
    backup: true
    src: nginx-server.conf
    dest: "{{ nginx_sites_available_dir }}/{{ server.filename | default(server.server_name) }}"
    owner: root
    group: root
    mode: '0644'
  notify: Nginx restart

- name: enable {{ nginx_sites_enabled_dir }}/{{ server.linkname | default(server.server_name) }}
  ansible.builtin.file:
    state: link
    src: "{{ nginx_sites_available_dir }}/{{ server.filename | default(server.server_name) }}"
    dest: "{{ nginx_sites_enabled_dir }}/{{ server.linkname | default(server.server_name) }}"
  when:
    - server.enabled | default(false)
    - not nginx_server_disable | default(false)
  notify: Nginx restart
